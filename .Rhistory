warning=function(w){
print("A warning occurred, most likely an invalid team name was given. Returning to menu")
})
return()
}
else if(input == "Y" || input == "y")
{
tryCatch(neutralSite(predictChoice), error=function(e){
print("An error occurred, most likely an invalid team name was given. Returning to menu")
},
warning=function(w){
print("A warning occurred, most likely an invalid team name was given. Returning to menu")
})
return()
}
else
{
print("Invalid input! Try again.")
}
}
}
rankings.selection <- function()
{
while(T)
{
input <- readline("Running rankings may take a while. Are you sure you want to continue? (Y/N)  ")
if(input == "N" || input == "n")
{
return()
}
else if(input == "Y" || input == "y")
{
predictChoice <- select.simulator();
source('ranking.r')
rCount <- readinteger("How many times would you like to simulate each match?\t")
print("Select location to write output.")
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.rankings.typed(predictChoice, rCount), fname, row.names=FALSE, sep=",")
return()
}
else{
print("Invalid input try again!")
}
}
}
conference.ranking.selection <- function()
{
while(T)
{
input <- readline("Running rankings may take a while. Are you sure you want to continue? (Y/N)  ")
if(input == "N" || input == "n")
{
return()
}
else if(input == "Y" || input == "y")
{
predictChoice <- select.simulator();
source('conferenceRanking.r')
conference <- readline("Which conference would you like to rank?\t")
rCount <- readinteger("How many times would you like to simulate each match?\t")
print("Select location to write output.")
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(conf.rankings(conference, predictChoice, rCount), fname, row.names=FALSE, sep=",")
return()
}
else{
print("Invalid input try again!")
}
}
}
simulator <- function(){
options <- data.frame(Option=as.character(),Description=as.character(),  stringsAsFactors=FALSE)
options[1,] <-  c("(R)", "Run full rankings")
options[2,] <- c("(C)", "Run conference rankings")
options[3,] <- c("(S)", "Simulate a match up")
options[4,] <- c("(Q)", "Quit Application")
while(T)
{
print("Choose from following options.")
print(options)
input <- readline("Input selection letter:\t")
if(input == "Q" || input == "q")
{
break
}
else if(input == "S" || input == "s")
{
tryCatch(simulator.selection(), error=function(e){
print("An error occurred returning to menu")
},
warning=function(w){
print("A warning was thrown returning to menu")
})
}
else if(input == "C" || input == "c")
{
tryCatch(conference.ranking.selection(), error=function(e){
print("An error occurred, most likely a bad conference name, returning to menu")
},
warning=function(w){
print("A warning was thrown, most likely a bad conference name, returning to menu")
})
}
else if(input == "R" || input == "r")
{
tryCatch(rankings.selection(), error=function(e){
print("An error occurred returning to menu")
},
warning=function(w){
print("A warning was thrown returning to menu")
})
}
else{
print("Invalid input try again!")
}
}
}
simulator()
readinteger <- function(text)
{
n <- readline(prompt=text)
if(!grepl("^[0-9]+$",n))
{
t <- text
return(readinteger(t))
}
return(as.integer(n))
}
select.simulator <- function()
{
options <- data.frame(Option=as.character(),Description=as.character(), Simulator=as.character(), stringsAsFactors=FALSE)
options[1,] <-  c("B", "Run standard bell simulator", "better_complex_predict.r")
options[2,] <- c("S", "Run scores only simulator", "play_by_play_points_predict.r")
options[3,] <- c("P", "Run play by play simulator", "play_by_play_predict.r")
options[4,] <- c("R", "Return to main menu", "leave")
predictChoice <- character();
while(length(predictChoice) == 0)
{
print(data.frame(options$Option, options$Description))
input <- readline("Select simulator to use:\t")
predictChoice <-  options[options$Option == toupper(as.character(input)),]$Simulator
if(length(predictChoice) == 0){
print("Invalid Selection")
}
}
return(predictChoice)
}
homeAway <- function(predictor)
{
source(predictor)
homeTeam <- readline("Home team name(must be exact match of data):\t")
awayTeam <- readline("Away team name(must be exact match of data):\t")
runs <- readinteger("How many games should we simulate:\t")
print(predict(homeTeam,awayTeam,runs))
print("")
}
neutralSite <- function(predictor)
{
source(predictor)
teamA <- readline("First team name(must be exact match of data):\t")
teamB <- readline("Second team name(must be exact match of data):\t")
runs <- readinteger("How many games should we simulate:\t")
print(neutral.predict(teamA,teamB,runs))
print("")
}
select.simulator <- function()
{
options <- data.frame(Option=as.character(),Description=as.character(), Simulator=as.character(), stringsAsFactors=FALSE)
options[1,] <-  c("B", "Run standard bell simulator", "better_complex_predict.r")
options[2,] <- c("S", "Run scores only simulator", "play_by_play_points_predict.r")
options[3,] <- c("P", "Run play by play simulator", "play_by_play_predict.r")
options[4,] <- c("R", "Return to main menu", "leave")
pc <- character();
while(length(pc) == 0)
{
print(data.frame(options$Option, options$Description))
input <- readline("Select simulator to use:\t")
pc <-  options[options$Option == toupper(as.character(input)),]$Simulator
if(length(pc) == 0){
print("Invalid Selection")
}
}
return(pc)
}
simulator.selection <- function(){
predictChoice <- select.simulator();
while(T){
input <- readline("Do you want to simulate game at a neutral site? (Y/N)  ")
if(input == "N" || input == "n")
{
tryCatch(homeAway(predictChoice), error=function(e){
print("An error occurred, most likely an invalid team name was given. Returning to menu")
},
warning=function(w){
print("A warning occurred, most likely an invalid team name was given. Returning to menu")
})
return()
}
else if(input == "Y" || input == "y")
{
tryCatch(neutralSite(predictChoice), error=function(e){
print("An error occurred, most likely an invalid team name was given. Returning to menu")
},
warning=function(w){
print("A warning occurred, most likely an invalid team name was given. Returning to menu")
})
return()
}
else
{
print("Invalid input! Try again.")
}
}
}
rankings.selection <- function()
{
while(T)
{
input <- readline("Running rankings may take a while. Are you sure you want to continue? (Y/N)  ")
if(input == "N" || input == "n")
{
return()
}
else if(input == "Y" || input == "y")
{
predictChoice <- select.simulator();
source('ranking.r')
rCount <- readinteger("How many times would you like to simulate each match?\t")
print("Select location to write output.")
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(calculate.rankings.typed(predictChoice, rCount), fname, row.names=FALSE, sep=",")
return()
}
else{
print("Invalid input try again!")
}
}
}
conference.ranking.selection <- function()
{
while(T)
{
input <- readline("Running rankings may take a while. Are you sure you want to continue? (Y/N)  ")
if(input == "N" || input == "n")
{
return()
}
else if(input == "Y" || input == "y")
{
predictChoice <- select.simulator();
source('conferenceRanking.r')
conference <- readline("Which conference would you like to rank?\t")
rCount <- readinteger("How many times would you like to simulate each match?\t")
print("Select location to write output.")
fname <- file.choose()
print("Running rankings.  Please wait.")
write.table(conf.rankings(conference, predictChoice, rCount), fname, row.names=FALSE, sep=",")
return()
}
else{
print("Invalid input try again!")
}
}
}
simulator <- function(){
options <- data.frame(Option=as.character(),Description=as.character(),  stringsAsFactors=FALSE)
options[1,] <-  c("(R)", "Run full rankings")
options[2,] <- c("(C)", "Run conference rankings")
options[3,] <- c("(S)", "Simulate a match up")
options[4,] <- c("(Q)", "Quit Application")
while(T)
{
print("Choose from following options.")
print(options)
input <- readline("Input selection letter:\t")
if(input == "Q" || input == "q")
{
break
}
else if(input == "S" || input == "s")
{
tryCatch(simulator.selection(), error=function(e){
print("An error occurred returning to menu")
},
warning=function(w){
print("A warning was thrown returning to menu")
})
}
else if(input == "C" || input == "c")
{
tryCatch(conference.ranking.selection(), error=function(e){
print("An error occurred, most likely a bad conference name, returning to menu")
},
warning=function(w){
print("A warning was thrown, most likely a bad conference name, returning to menu")
})
}
else if(input == "R" || input == "r")
{
tryCatch(rankings.selection(), error=function(e){
print("An error occurred returning to menu")
},
warning=function(w){
print("A warning was thrown returning to menu")
})
}
else{
print("Invalid input try again!")
}
}
}
simulator()
source('C:\\Users\\mb24244\\Documents\\football anaylsis\\SoSplayed.r')
SoS <- records
offense <- read.csv(file = 'C:\\Users\\mb24244\\Documents\\football anaylsis\\offense.csv', sep=',', header=T)
defense <- read.csv(file = 'C:\\Users\\mb24244\\Documents\\football anaylsis\\defense.csv', sep=',', header=T)
records <- read.csv(file = 'C:\\Users\\mb24244\\Documents\\football anaylsis\\records.csv', sep=',', header=T)
box.scores <- read.csv(file = 'C:\\Users\\mb24244\\Documents\\football anaylsis\\box_data.csv', sep=',', header=T)
averageSoS <- sum(SoS$Adjusted.SoS)/length(SoS$Adjusted.SoS)
homeName <- "Miami (FL)"
awayName <- "Florida State"
runCount <- 10000
combine <- merge(offense, defense, by="TEAM")
combine <- merge(combine, records, by="TEAM")
average.YDS.G <- sum(offense$YDS.G)/length(offense$YDS.G)
deviation.YDS.G <- sd(offense$YDS.G)
average.D.YDS.G <- sum(defense$D.YDS.G)/length(defense$D.YDS.G)
deviation.D.YDS.G <- sd(defense$D.YDS.G)
home <- combine[combine$TEAM == homeName,]
away <- combine[combine$TEAM == awayName,]
homeOpps <- box.scores[box.scores$TEAM == homeName,]
awayOpps <- box.scores[box.scores$TEAM == awayName,]
homePassOadj <- 0
homePassDadj <- 0
homeRunOadj <- 0
homeRunDadj <- 0
homePFadj <- 0
homePAadj <- 0
homeTurnoverForAve <- sum(homeOpps$TURNOVERS.FOR)/length(homeOpps$TURNOVERS.FOR)
homeTurnoverForSd <- sd(homeOpps$TURNOVERS.FOR)
homeTurnoverAgainstAve <- sum(homeOpps$TURNOVERS.AGAINST)/length(homeOpps$TURNOVERS.AGAINST)
homeTurnoverAgainstSd <- sd(homeOpps$TURNOVERS.AGAINST)
homePenaltyAgainstAve <- sum(homeOpps$PENALTY.YARDS.AGAINST)/length(homeOpps$PENALTY.YARDS.AGAINST)
homePenaltyAgainstSd  <- sd(homeOpps$PENALTY.YARDS.AGAINST)
awayPassOadj <- 0
awayPassDadj <- 0
awayRunOadj <- 0
awayRunDadj <- 0
awayPFadj <- 0
awayPAadj <- 0
awayTurnoverForAve <- sum(awayOpps$TURNOVERS.FOR)/length(awayOpps$TURNOVERS.FOR)
awayTurnoverForSd <- sd(awayOpps$TURNOVERS.FOR)
awayTurnoverAgainstAve <- sum(awayOpps$TURNOVERS.AGAINST)/length(awayOpps$TURNOVERS.AGAINST)
awayTurnoverAgainstSd <- sd(awayOpps$TURNOVERS.AGAINST)
awayPenaltyAgainstAve <- sum(awayOpps$PENALTY.YARDS.AGAINST)/length(awayOpps$PENALTY.YARDS.AGAINST)
awayPenaltyAgainstSd  <- sd(awayOpps$PENALTY.YARDS.AGAINST)
homePassOoff <- c(1:length(homeOpps$OPP))
homePassDoff <- c(1:length(homeOpps$OPP))
homeRunOoff <- c(1:length(homeOpps$OPP))
homeRunDoff <- c(1:length(homeOpps$OPP))
homePFoff <- c(1:length(homeOpps$OPP))
homePAoff <- c(1:length(homeOpps$OPP))
homePassOYards.Past <- c(1:length(homeOpps$OPP))
homePassDYards.Past <- c(1:length(homeOpps$OPP))
homeRunOYards.Past <- c(1:length(homeOpps$OPP))
homeRunDYards.Past <- c(1:length(homeOpps$OPP))
homePF.Past <- c(1:length(homeOpps$OPP))
homePA.Past <- c(1:length(homeOpps$OPP))
awayPassOoff <- c(1:length(awayOpps$OPP))
awayPassDoff <- c(1:length(awayOpps$OPP))
awayRunOoff <- c(1:length(awayOpps$OPP))
awayRunDoff <- c(1:length(awayOpps$OPP))
awayPFoff <- c(1:length(awayOpps$OPP))
awayPAoff <- c(1:length(awayOpps$OPP))
awayPassOYards.Past <- c(1:length(awayOpps$OPP))
awayPassDYards.Past <- c(1:length(awayOpps$OPP))
awayRunOYards.Past <- c(1:length(awayOpps$OPP))
awayRunDYards.Past <- c(1:length(awayOpps$OPP))
awayPF.Past <- c(1:length(awayOpps$OPP))
awayPA.Past <- c(1:length(awayOpps$OPP))
for(i in 1:length(homeOpps$OPP))
{
oppName <- as.character(homeOpps[i,]$OPP)
OSoSoff <- 1 # + 2*(SoS[SoS$TEAM == oppName,]$Adjusted.SoS - averageSoS )
DSoSoff <- 1 #+ 2*(averageSoS - SoS[SoS$TEAM == oppName,]$Adjusted.SoS)
opp <- combine[combine$TEAM == oppName,]
homePassOoff[i] <- OSoSoff*((homeOpps[i,]$P.YARDS.FOR)/(opp$D.P.YDS.G))
homePassDoff[i] <- DSoSoff*(homeOpps[i,]$P.YARDS.AGAINST)/(opp$P.YDS.G)
homeRunOoff[i] <- OSoSoff*(homeOpps[i,]$R.YARDS.F)/opp$D.R.YDS.G
homeRunDoff[i] <- DSoSoff*(homeOpps[i,]$R.YARDS.AGAINST)/opp$R.YDS.G
homePFoff[i] <- OSoSoff*(homeOpps[i,]$POINTS.FOR)/opp$D.PTS.G
homePAoff[i] <- DSoSoff*(homeOpps[i,]$POINTS.AGAINST)/opp$PTS.G
homePassOYards.Past[i] <- homeOpps[i,]$P.YARDS.FOR
homePassDYards.Past[i] <- homeOpps[i,]$P.YARDS.AGAINST
homeRunOYards.Past[i] <- homeOpps[i,]$R.YARDS.F
homeRunDYards.Past[i] <- homeOpps[i,]$R.YARDS.AGAINST
homePF.Past[i] <- homeOpps[i,]$POINTS.FOR
homePA.Past[i] <- homeOpps[i,]$POINTS.AGAINST
}
for(i in 1:length(awayOpps$OPP))
{
oppName <- as.character(awayOpps[i,]$OPP)
opp <- combine[combine$TEAM == oppName,]
OSoSoff <- 1 #+ 2*(SoS[SoS$TEAM == oppName,]$Adjusted.SoS - averageSoS )
DSoSoff <- 1 #+ 2*(averageSoS - SoS[SoS$TEAM == oppName,]$Adjusted.SoS)
awayPassOoff[i] <-  OSoSoff*(awayOpps[i,]$P.YARDS.FOR)/opp$D.P.YDS.G
awayPassDoff[i] <-  DSoSoff*(awayOpps[i,]$P.YARDS.AGAINST)/opp$P.YDS.G
awayRunOoff[i] <-  OSoSoff*(awayOpps[i,]$R.YARDS.F)/opp$D.R.YDS.G
awayRunDoff[i] <-  DSoSoff*(awayOpps[i,]$R.YARDS.AGAINST)/opp$R.YDS.G
awayPFoff[i] <-  OSoSoff*(awayOpps[i,]$POINTS.FOR)/opp$D.PTS.G
awayPAoff[i] <-  DSoSoff*(awayOpps[i,]$POINTS.AGAINST)/opp$PTS.G
awayPassOYards.Past[i] <- awayOpps[i,]$P.YARDS.FOR
awayPassDYards.Past[i] <- awayOpps[i,]$P.YARDS.AGAINST
awayRunOYards.Past[i] <- awayOpps[i,]$R.YARDS.F
awayRunDYards.Past[i] <- awayOpps[i,]$R.YARDS.AGAINST
awayPF.Past[i] <- awayOpps[i,]$POINTS.FOR
awayPA.Past[i] <- awayOpps[i,]$POINTS.AGAINST
}
homePassOadj <- sum(homePassOoff)/length(homePassOoff)
homePassDadj <-  sum(homePassDoff)/length(homePassDoff)
homeRunOadj <-  sum(homeRunOoff)/length(homeRunOoff)
homeRunDadj <-  sum(homeRunDoff)/length(homeRunDoff)
homePFadj <-  sum(homePFoff)/length(homePFoff)
homePAadj <-  sum(homePAoff)/length(homePAoff)
homePassOsd <- sd(homePassOoff)
homePassDsd <-  sd(homePassDoff)
homeRunOsd <-  sd(homeRunOoff)
homeRunDsd <-  sd(homeRunDoff)
homePFsd <-  sd(homePFoff)
homePAsd <-  sd(homePAoff)
awayPassOadj <- sum(awayPassOoff)/length(awayPassOoff)
awayPassDadj <-  sum(awayPassDoff)/length(awayPassDoff)
awayRunOadj <-  sum(awayRunOoff)/length(awayRunOoff)
awayRunDadj <-  sum(awayRunDoff)/length(awayRunDoff)
awayPFadj <-  sum(awayPFoff)/length(awayPFoff)
awayPAadj <-  sum(awayPAoff)/length(awayPAoff)
awayPassOsd <- sd(awayPassOoff)
awayPassDsd <-  sd(awayPassDoff)
awayRunOsd <-  sd(awayRunOoff)
awayRunDsd <-  sd(awayRunDoff)
awayPFsd <-  sd(awayPFoff)
awayPAsd <-  sd(awayPAoff)
homeSoSoffset <- SoS[SoS$TEAM == as.character(home$TEAM),]$Adjusted.SoS /  SoS[SoS$TEAM == as.character(away$TEAM),]$Adjusted.SoS
awaySoSoffset <- SoS[SoS$TEAM == as.character(away$TEAM),]$Adjusted.SoS / SoS[SoS$TEAM == as.character(home$TEAM),]$Adjusted.SoS
homePassO <- rnorm(n=runCount, mean=homePassOadj, sd=homePassOsd)
homePassD <-rnorm(n=runCount, mean=homePassDadj, sd=homePassDsd)
awayPassO <-rnorm(n=runCount, mean=awayPassOadj, sd=awayPassOsd)
awayPassD <-rnorm(n=runCount, mean=awayPassDadj, sd=awayPassDsd)
homeRunO <- rnorm(n=runCount, mean=homeRunOadj, sd=homeRunOsd)
homeRunD <-rnorm(n=runCount, mean=homeRunDadj, sd=homeRunDsd)
awayRunO <-rnorm(n=runCount, mean=awayRunOadj, sd=awayRunOsd)
awayRunD <-rnorm(n=runCount, mean=awayRunDadj, sd=awayRunDsd)
homePassOYards<- rnorm(n=runCount, mean=mean(homePassOYards.Past), sd=sd(homePassOYards.Past))
homePassDYards <- rnorm(n=runCount, mean=mean(homePassDYards.Past), sd=sd(homePassDYards.Past))
awayPassOYards<- rnorm(n=runCount, mean=mean(awayPassOYards.Past), sd=sd(awayPassOYards.Past))
awayPassDYards <- rnorm(n=runCount, mean=mean(awayPassDYards.Past), sd=sd(awayPassDYards.Past))
homeRunOYards <- rnorm(n=runCount, mean=mean(homeRunOYards.Past), sd=sd(homeRunOYards.Past))
homeRunDYards <- rnorm(n=runCount, mean=mean(homeRunDYards.Past), sd=sd(homeRunDYards.Past))
awayRunOYards <- rnorm(n=runCount, mean=mean(awayRunOYards.Past), sd=sd(awayRunOYards.Past))
awayRunDYards <- rnorm(n=runCount, mean=mean(awayRunDYards.Past), sd=sd(awayRunDYards.Past))
homePointsForList <-  rnorm(n=runCount, mean=mean(homePF.Past), sd=sd(homePF.Past))
homePointsAgainstList <- rnorm(n=runCount, mean=mean(homePA.Past), sd=sd(homePA.Past))
awayPointsForList <-  rnorm(n=runCount, mean=mean(awayPF.Past), sd=sd(awayPF.Past))
awayPointsAgainstList <- rnorm(n=runCount, mean=mean(awayPA.Past), sd=sd(awayPA.Past))
homePenalty <- rnorm(n=runCount, mean=homePenaltyAgainstAve, sd=homePenaltyAgainstSd)
awayPenalty <-rnorm(n=runCount, mean=awayPenaltyAgainstAve, sd=awayPenaltyAgainstSd)
homeTurnoverAgainst <- rnorm(n=runCount, mean=homeTurnoverAgainstAve, sd=homeTurnoverAgainstSd)
awayTurnoverAgainst <-rnorm(n=runCount, mean=awayTurnoverAgainstAve, sd=awayTurnoverAgainstSd)
homeTurnoverFor <- rnorm(n=runCount, mean=homeTurnoverForAve, sd=homeTurnoverForSd)
awayTurnoverFor <-rnorm(n=runCount, mean=awayTurnoverForAve, sd=awayTurnoverForSd)
homePF <- rnorm(n=runCount, mean=homePFadj, sd=homePFsd)
awayPF <- rnorm(n=runCount, mean=awayPFadj, sd=awayPFsd)
homePA <- rnorm(n=runCount, mean=homePAadj, sd=homePAsd)
awayPA <- rnorm(n=runCount, mean=awayPAadj, sd=awayPAsd)
homePass <- c(1:runCount)
awayPass <- c(1:runCount)
homeRun <- c(1:runCount)
awayRun <- c(1:runCount)
homeScore <- c(1:runCount)
awayScore <- c(1:runCount)
homeTurnover <- c(1:runCount)
awayTurnover <- c(1:runCount)
View(FBS.Records)
View(FBS.Records)
View(box.scores)
View(box.scores)
combine[combine$TEAM == "Miami (FL)"]
combine[combine$TEAM == "Miami (FL)",\]
combine[combine$TEAM == "Miami (FL)",]
combine[combine$TEAM == "Florida State",]
combine[combine$TEAM == "Miami (FL)",] -  combine[combine$TEAM == "Miami (FL)",]
combine[combine$TEAM == "Miami (FL)",]-combine[combine$TEAM == "Florida State",]
sum(homeOpps$TURNOVERS.FOR)
72.5-55.85
sum(homeOpps$TURNOVERS.AGAINST)
sum(awayOpps$TURNOVERS.FOR)
sum(awayOpps$TURNOVERS.AGAINST)
161-112
112-161
127.2-90.5
127.2-156
77.4-110.5
65.3-100.8
-67.2-86.8
67.2-86.8
FBS.Records$Rank <- 1 + length(FBS.Records$Adjusted.SoS) - rank(FBS.Records$Adjusted.SoS)
FBS.Records[FBS.Records$TEAM == "Miami (FL)",]
FBS.Records[FBS.Records$TEAM == "Florida State",]
FBS.Records[FBS.Records$TEAM == "Miami (FL)",]-FBS.Records[FBS.Records$TEAM == "Florida State",]
